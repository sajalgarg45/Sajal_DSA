-------------------
1) BUBBLE SORT  (Sinking Sort or Exchange Sort)
-------------------
It is a in-place sorting algorithm -> means we don't need to create an array for this
Space Complexity - 0(1)
Time Complexity -
Best case O(n) -> array is sorted
Worst case O(n2) -> array is in descending order
as the size grows , number of comparisons also grow

UnSort - 3 1 5 4 2
Sorted - 1 2 3 4 5

every step comparing adjacent elements

1st pass -> compare 3 and 1 -> is 3>1 -> No -> Swap -> 1 3 5 4 2
same goes for 3-5 then 5-4 then 5-2
updated array look like 1 3 4 2 5 , pass 1 ends
from this we understand each pass take the largest element in the array to end of the array

2nd pass -> 2nd largest reach to 2nd last position
same goes for each pass ,
at certain pass the array would be sorted to look like -> 1 2 3 4 5

NOTE - as each pass goes the right hand end side of array is started to get sorted
so don't compare the elements to the last elements
like 1 3 4 2 5 this is first pass , so in second pass array comes to 1 3 2 4 5 , so
here i don't need to check the 4-5 pair , it is unnecessary , we can save this in our code

Bubble sort is a stable algorithm means the order remain the same if the values are same

-------------------
2) SELECTION SORT
-------------------

UnSort - 4 5 1 2 3
Sorted - 1 2 3 4 5

Space Complexity - O(n)
Time Complexity -
Best case - O(n2)
Worst case - O(n2)

It is a non stable algorithm
it performs well in small arrays

In this sorting algorithm , we took the largest element in the array and place it at the
correct index , like in the given array 5 is the greatest , put that at the end of the array
so our new array looks like - 4 3 1 2 5 , here 3-5 swap there positions

similarly for the second iteration the second largest element moves to the second largest element
place in the array
so as the element is placing to its correct position, the number of iterations are starting
to reduce by 1 , so n-i-1 comparisons are made at each iteration

here we are swapping the last index which we get from last variable
and getMaxIndex , where we get the max element index ,
so we can swap the last index element to the max index element to sort the list

-------------------
3) INSERTION SORT
-------------------

The logic for insertion sort is hard , so understand clearly

UnSort - 5 3 4 1 2
Sorted - 1 2 3 4 5

Time complexity ->
worst case O(n2)
best case O(n)

it is stable , use for smaller value of n , works good when partially the array is sorted
it take part in hybrid sorting algorithms

so the logic is sort the array till each incrementing index
like first sort the array till 1 index
then sort till 2 , sort till 3 , sort till 4 -> now the array is sorted
so 2 for loop will use , where i starts from 0 and j starts from i+1

lets say at pass 3 the array looks like
3 4 5 1 2 -> here the array is sorted till [3 4 5] , we have to insert 1 to its correct index

lets say -
5 3 4 1 2
i   j

0   1 -> 3,5,4,1,2 -> so now the position of i and j is swapped
from that we understand i<=n-2 and j>0

1   2 -> 3 4 5 1 2 -> here when element j is smaller than element j-1 , break the loop
because the left hand side array is sorted

2   3 -> 1 3 4 5 2 -> till index 3 it is sorted

