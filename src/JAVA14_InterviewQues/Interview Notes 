3) MERGE TWO SORTED LIST

List 1 : 1-> 3-> 5
List 2 : 1-> 2-> 9-> 14

RES - 1-> 1-> 2-> 3-> 5-> 9-> 14
Take the smallest element simultaneously with the given 2 list


4) LINKED LIST CYCLE APPROACH (FAST AND SLOW)

Fast and slow pointer method used for
a) cycle detection
b) finding or landing on the node in a cycle

1-2-3-4-5
      |  \
      8-7-6
return true or false is cycle is present

lets take two pointer fast and slow in head ,
here slow will move 1 by 1 and fast will move 2 by 2
here every loop iterates the fast and slow pointer will traverse and if at any point
the fast and slow reaches to same node , then it is logically means a loop is present
hence return true else false .

Possibilities :
a) fs -> f-s
b) f-s -> fs

No cycle O(n)
Cycle O(n)


5) LENGTH OF THE LINKED LIST CYCLE

when the fast and slow pointer meets , stop the fast pointer
and traverse only the slow pointer and start a counter
as the loop is present the slow pointer again reach the fast pointer
hence the count is length of the cycle


6) RETURN THE NODE WHERE THE CYCLE STARTS (LINKED LIST CYCLE II)

Use Fast and Slow Pointers to detect if a cycle exists
If fast == slow at some point → a cycle exists.
Once they meet, reset one pointer to the head , Let’s call the meeting point: meetingPoint.
ptr1 = head
ptr2 = meetingPoint
When ptr1 == ptr2, you have reached the start of the cycle.


7) HAPPY NUMBER

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

but
Input: n = 12
Output: false
Explanation:
1² + 2² = 1 + 4 = 5
5² = 25
2² + 5² = 4 + 25 = 29
2² + 9² = 4 + 81 = 85
8² + 5² = 64 + 25 = 89 -------------------------------------
8² + 9² = 64 + 81 = 145
1² + 4² + 5² = 1 + 16 + 25 = 42
4² + 2² = 16 + 4 = 20
2² + 0² = 4 + 0 = 4
4² = 16
1² + 6² = 1 + 36 = 37
3² + 7² = 9 + 49 = 58
5² + 8² = 25 + 64 = 89 -------------------------------------
Uh-oh! We're back to 89, which we've already seen.

hence we understand there is a looping here and we can connect this ques
with the logic of Linked list cycle


8) MIDDLE OF THE LINKED LIST
Fast and slow pointer will be used

if the slow pointer reaches the mid then obviously the fast pointer reaches the end
thus we get the middle
